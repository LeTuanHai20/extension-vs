"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const vscode = require("vscode");
class Log {
    constructor(configSection, workspaceFolder, outputChannelName) {
        this.configSection = configSection;
        this.workspaceFolder = workspaceFolder;
        this.outputChannelName = outputChannelName;
        this.targets = [];
        this.configure();
        vscode.workspace.onDidChangeConfiguration(event => {
            if (event.affectsConfiguration(this.configSection + '.logpanel') ||
                event.affectsConfiguration(this.configSection + '.logfile')) {
                this.configure();
            }
        });
    }
    get enabled() { return (this.targets.length > 0); }
    debug(msg) {
        this.log(msg, 'DEBUG');
    }
    info(msg) {
        this.log(msg, 'INFO');
    }
    warn(msg) {
        this.log(msg, 'WARN');
    }
    error(msg) {
        this.log(msg, 'ERROR');
    }
    dispose() {
        this.targets.map(target => target.dispose());
        this.targets = [];
    }
    log(msg, logLevel) {
        if (this.targets.length > 0) {
            const dateString = new Date().toISOString().replace('T', ' ').replace('Z', '');
            this.targets.map(target => target.write(`[${dateString}] [${logLevel}] ${msg}`));
        }
    }
    configure() {
        this.targets.map(target => target.dispose());
        this.targets = [];
        const uri = this.workspaceFolder ? this.workspaceFolder.uri : undefined;
        const configuration = vscode.workspace.getConfiguration(this.configSection, uri);
        if (configuration.get('logpanel')) {
            this.targets.push(new OutputChannelTarget(this.outputChannelName));
        }
        const file = configuration.get('logfile');
        if (file) {
            this.targets.push(new FileTarget(file));
        }
    }
}
exports.Log = Log;
class OutputChannelTarget {
    constructor(name) {
        this.outputChannel = vscode.window.createOutputChannel(name);
    }
    write(msg) {
        this.outputChannel.appendLine(msg);
    }
    dispose() {
        this.outputChannel.dispose();
    }
}
exports.OutputChannelTarget = OutputChannelTarget;
class FileTarget {
    constructor(filename) {
        this.buffered = [];
        this.fd = undefined;
        this.writing = false;
        fs.open(filename, 'a', (err, fd) => {
            if (err) {
                vscode.window.showErrorMessage(`Couldn't open log file ${filename}: ${err}`);
            }
            else {
                this.fd = fd;
                this.writeNext();
            }
        });
    }
    write(msg) {
        if ((this.fd === undefined) || this.writing) {
            this.buffered.push(msg);
        }
        else {
            this.writeNow(msg);
        }
    }
    dispose() {
        if (this.fd !== undefined) {
            fs.closeSync(this.fd);
        }
    }
    /** must only be called if `this.fd` is set and `this.writing` is `false` */
    writeNext() {
        const msg = this.buffered.shift();
        if (msg !== undefined) {
            this.writeNow(msg);
        }
    }
    /** must only be called if `this.fd` is set and `this.writing` is `false` */
    writeNow(msg) {
        this.writing = true;
        fs.write(this.fd, msg + '\n', err => {
            if (err) {
                vscode.window.showErrorMessage(`Couldn't write to log file: ${err}`);
            }
            this.writing = false;
            this.writeNext();
        });
    }
}
exports.FileTarget = FileTarget;
