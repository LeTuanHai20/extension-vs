"use strict";var e=this&&this.t||function(t,s,i,n){return new(i||(i=Promise))(function(e,o){function r(t){try{c(n.next(t))}catch(t){o(t)}}function h(t){try{c(n.throw(t))}catch(t){o(t)}}function c(t){var s;t.done?e(t.value):(s=t.value,s instanceof i?s:new i(function(t){t(s)})).then(r,h)}c((n=n.apply(t,s||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const r=require("vscode"),i=require("./util");class ds{constructor(){this.pendingReloads=[],this.pendingTestRuns=[]}scheduleReload(t,s){this.pendingReloads.push([t,s]),this.doNext()}scheduleTestRun(t){this.pendingTestRuns.push(t);for(const s of i.allTests(t))s.setCurrentState("scheduled");this.doNext()}cancel(){return e(this,void 0,void 0,function*(){for(const t of this.pendingTestRuns)for(const s of i.allTests(t))"scheduled"!==s.state.current&&"running"!==s.state.current||s.setCurrentState("pending");this.pendingTestRuns=[],this.currentTestRun&&(this.currentTestRun[0].adapter.cancel(),yield this.currentTestRun[1])})}doNext(){if(this.currentReload||this.currentTestRun)return;if(this.pendingReloads.length>0){const[t,s]=this.pendingReloads.shift();return void this.loadTests(t,s)}const t=this.pendingTestRuns.shift();t&&this.runTests(t)}loadTests(t,s){return e(this,void 0,void 0,function*(){r.commands.executeCommand("setContext","testsLoading",!0),this.currentReload=t;try{yield t.loadTests()}catch(t){r.window.showErrorMessage(`Error while loading tests: ${t}`)}this.currentReload=void 0,r.commands.executeCommand("setContext","testsLoading",!1),s&&t.autorunNode&&this.scheduleTestRun(t.autorunNode),this.doNext()})}runTests(t){return e(this,void 0,void 0,function*(){const s=t.collection;s.shouldRetireStateOnStart()?s.retireState():s.shouldResetStateOnStart()&&s.resetState(),r.commands.executeCommand("setContext","testsRunning",!0),s.testRunStarting();try{const i=s.adapter.run(t.info);this.currentTestRun=[s,i],yield i}catch(t){r.window.showErrorMessage(`Error while running tests: ${t}`)}this.currentTestRun=void 0;for(const s of i.allTests(t))"scheduled"!==s.state.current&&"running"!==s.state.current||s.setCurrentState("pending");s.testRunFinished(),r.commands.executeCommand("setContext","testsRunning",!1),this.doNext()})}}exports.TestScheduler=ds;